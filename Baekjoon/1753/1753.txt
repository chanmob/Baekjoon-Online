import sys
import heapq

input = sys.stdin.readline
INF = float('inf')

def dijkstra(start, V, graph):
    distance = [INF] * (V + 1)
    distance[start] = 0
    
    queue = []
    heapq.heappush(queue, (0, start))
    
    while queue:
        cur_d, cur_v = heapq.heappop(queue)
        
        if cur_d > distance[cur_v]:
            continue
        
        for neighbor, weight in graph[cur_v]:
            new_d = cur_d + weight
            if new_d < distance[neighbor]:
                distance[neighbor] = new_d
                heapq.heappush(queue, (new_d, neighbor))
                
    return distance

V, E = map(int, input().split())
start = int(input())
graph = [[] for _ in range(V + 1)]

for _ in range(E):
    u, v, w = map(int, input().split())
    graph[u].append((v, w))
    
distance = dijkstra(start, V, graph)

for i in range(1, V + 1):
    if distance[i] == INF:
        print("INF")
    else:
        print(distance[i])