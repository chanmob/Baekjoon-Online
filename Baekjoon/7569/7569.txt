from collections import deque
import sys

input = sys.stdin.readline

M, N, H = map(int, input().split())
graph = [[list(map(int, input().split())) for _ in range(N)] for _ in range(H)]

mx = [-1, 1, 0, 0, 0, 0]
my = [0, 0, -1, 1, 0, 0]
mz = [0, 0, 0, 0, -1, 1]

queue = deque()

def BFS():
    while queue:
        z, x, y = queue.popleft()
        for i in range(6):
            nx = x + mx[i]
            ny = y + my[i]
            nz = z + mz[i]
            if 0 > nx or nx >= N or 0 > ny or ny >= M or 0 > nz or nz >= H:
                continue
            if graph[nz][nx][ny] == 0:
                graph[nz][nx][ny] = graph[z][x][y] + 1
                queue.append((nz, nx, ny))
                
for i in range(H):
    for j in range(N):
        for k in range(M):
            if graph[i][j][k] == 1:
                queue.append((i, j, k))
                
BFS()

complete = True
result = 0

for i in range(H):
    for j in range(N):
        for k in range(M):
            if graph[i][j][k] == 0:
                complete = False
            result = max(result, graph[i][j][k])
            
if complete == False:
    print(-1)
else:
    print(result - 1)