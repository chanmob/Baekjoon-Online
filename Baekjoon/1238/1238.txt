import sys
import heapq

input = sys.stdin.readline

n, m, x = map(int, input().split())

graph = [[] for _ in range(n + 1)]

for _ in range(m):
    a, b, c = map(int, input().split())
    graph[a].append((b, c))

def checkdistance(s):
    costs = [1e9 for _ in range(n + 1)]
    costs[s] = 0
    heap = []
    heapq.heappush(heap, [s, 0])
    while heap:
        d, v = heapq.heappop(heap)
        if costs[d] < v:
            continue
        for nd, nv in graph[d]:
            nnv = v + nv
            if nnv >= costs[nd]:
                continue
            costs[nd] = nnv
            heapq.heappush(heap, [nd, nnv])
    return costs
    
result = checkdistance(x)
result[0] = 0

for i in range(1, n + 1):
    if i != x:
        distance = checkdistance(i)
        result[i] += distance[x]
    
print(max(result))