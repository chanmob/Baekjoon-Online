import sys
from collections import deque

input = sys.stdin.readline

n, m = map(int, input().split())
graph = []

for i in range(n):
    graph.append(list(input().rstrip()))
    for j in range(m):
        if graph[i][j] == 'R':
            rx = i
            ry = j
        elif graph[i][j] == 'B':
            bx = i
            by = j
            
mx = [1, -1, 0, 0]
my = [0, 0, 1, -1]

def bfs(rx, ry, bx, by):
    q = deque()
    q.append((rx, ry, bx, by))
    visited = []
    visited.append((rx, ry, bx, by))
    count = 0
    while q:
        for _ in range(len(q)):
            rx, ry, bx, by = q.popleft()
            if count > 10:
                print(-1)
                return
            if graph[rx][ry] == 'O':
                print(count)
                return 
            for i in range(4):
                nrx, nry = rx, ry
                while True:
                    nrx += mx[i]
                    nry += my[i]
                    if graph[nrx][nry] == '#':
                        nrx -= mx[i]
                        nry -= my[i]
                        break
                    if graph[nrx][nry] == 'O':
                        break
                nbx, nby = bx, by
                while True:
                    nbx += mx[i]
                    nby += my[i]
                    if graph[nbx][nby] == '#':
                        nbx -= mx[i]
                        nby -= my[i]
                        break
                    if graph[nbx][nby] == 'O':
                        break
                if graph[nbx][nby] == 'O':
                    continue
                if nrx == nbx and nry == nby:
                    if abs(nrx - rx) + abs(nry - ry) > abs(nbx - bx) + abs(nby - by):
                        nrx -= mx[i]
                        nry -= my[i]
                    else:
                        nbx -= mx[i]
                        nby -= my[i]
                if (nrx, nry, nbx, nby) not in visited:
                    q.append((nrx, nry, nbx, nby))
                    visited.append((nrx, nry, nbx, nby))
        count += 1
    print(-1)
    
bfs(rx, ry, bx, by)