import sys
import heapq

input = sys.stdin.readline

INF = float('inf')
n = int(input())
m = int(input())

graph = [[] for _ in range(n + 1)]

for i in range(m):
    a, b, c = map(int, input().split())
    graph[a].append((b, c))

def dijkstra(start, V, graph):
    distance = [INF] * (V + 1)
    distance[start] = 0
    
    queue = []
    heapq.heappush(queue, (0, start))
    
    while queue:
        cur_d, cur_v = heapq.heappop(queue)
        
        if cur_d > distance[cur_v]:
            continue

        for neighbor, weight in graph[cur_v]:
            new_d = cur_d + weight
            if new_d < distance[neighbor]:
                distance[neighbor] = new_d
                heapq.heappush(queue, (new_d, neighbor))
    
    for i in range(V + 1):
        if distance[i] == INF:
            distance[i] = 0
    
    return distance[1:]

for i in range(1, n + 1):
    print(*dijkstra(i, n, graph))